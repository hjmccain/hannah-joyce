{"version":3,"file":"d80f53e9d6a8f9308b5a7a1d4a31f98cae53a1be-ee93b2f3985aae3b98c3.js","mappings":"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","sources":["webpack://pansy/./node_modules/classnames/index.js","webpack://pansy/../src/image-utils.ts","webpack://pansy/../src/components/hooks.ts","webpack://pansy/../src/components/layout-wrapper.tsx","webpack://pansy/../src/components/picture.tsx","webpack://pansy/../src/components/placeholder.tsx","webpack://pansy/../src/components/main-image.tsx","webpack://pansy/../src/components/gatsby-image.server.tsx","webpack://pansy/../src/components/gatsby-image.browser.tsx","webpack://pansy/../src/components/static-image.server.tsx","webpack://pansy/../src/components/static-image.tsx","webpack://pansy/./node_modules/gatsby-plugin-image/node_modules/camelcase/index.js","webpack://pansy/./src/pages/portfolio.tsx"],"sourcesContent":["/*!\n\tCopyright (c) 2018 Jed Watson.\n\tLicensed under the MIT License (MIT), see\n\thttp://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\tvar nativeCodeString = '[native code]';\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  outputPixelDensities?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Partial<Node> & {\n  childImageSharp?: IGatsbyImageDataParent<Partial<Node>>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (\n  node: ImageDataLike | null\n): IGatsbyImageData | undefined => {\n  // This checks both for gatsbyImageData and gatsbyImage\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { Fragment, FunctionComponent, PropsWithChildren } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg%20height='${height}'%20width='${width}'%20xmlns='http://www.w3.org/2000/svg'%20version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg%20height='${height}'%20width='${width}'%20xmlns='http://www.w3.org/2000/svg'%20version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<\n  PropsWithChildren<ILayoutWrapperProps>\n> = function LayoutWrapper({ children, ...props }) {\n  return (\n    <Fragment>\n      <Sizer {...props} />\n      {children}\n\n      {SERVER ? <NativeScriptLoading /> : null}\n    </Fragment>\n  )\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import {\n  createElement,\n  memo,\n  useMemo,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from \"react\"\nimport {\n  getWrapperProps,\n  gatsbyImageIsInstalled,\n  hasNativeLazyLoadSupport,\n} from \"./hooks\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport type {\n  FC,\n  ElementType,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  CSSProperties,\n  ReactEventHandler,\n} from \"react\"\nimport type { renderImageToString } from \"./lazy-hydrate\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { Layout } from \"../image-utils\"\n\nconst imageCache = new Set<string>()\nlet renderImageToStringPromise\nlet renderImage: typeof renderImageToString | undefined\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: (props: { wasCached: boolean }) => void\n  onError?: ReactEventHandler<HTMLImageElement>\n  onStartLoad?: (props: { wasCached: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nconst GatsbyImageHydrator: FC<GatsbyImageProps> = function GatsbyImageHydrator({\n  as = `div`,\n  image,\n  style,\n  backgroundColor,\n  className,\n  class: preactClass,\n  onStartLoad,\n  onLoad,\n  onError,\n  ...props\n}) {\n  const { width, height, layout } = image\n  const {\n    style: wStyle,\n    className: wClass,\n    ...wrapperProps\n  } = getWrapperProps(width, height, layout)\n  const root = useRef<HTMLElement>()\n  const cacheKey = useMemo(() => JSON.stringify(image.images), [image.images])\n\n  // Preact uses class instead of className so we need to check for both\n  if (preactClass) {\n    className = preactClass\n  }\n\n  const sizer = getSizer(layout, width, height)\n\n  useEffect(() => {\n    if (!renderImageToStringPromise) {\n      renderImageToStringPromise = import(`./lazy-hydrate`).then(\n        ({ renderImageToString, swapPlaceholderImage }) => {\n          renderImage = renderImageToString\n\n          return {\n            renderImageToString,\n            swapPlaceholderImage,\n          }\n        }\n      )\n    }\n\n    // The plugin image component is a bit special where if it's server-side rendered, we add extra script tags to support lazy-loading without\n    // In this case we stop hydration but fire the correct events.\n    const ssrImage = root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    ) as HTMLImageElement\n    if (ssrImage && hasNativeLazyLoadSupport()) {\n      if (ssrImage.complete) {\n        // Trigger onStartload and onLoad events\n        onStartLoad?.({\n          wasCached: true,\n        })\n        onLoad?.({\n          wasCached: true,\n        })\n\n        // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n        setTimeout(() => {\n          ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n        }, 0)\n      } else {\n        onStartLoad?.({\n          wasCached: true,\n        })\n\n        ssrImage.addEventListener(`load`, function onLoadListener() {\n          ssrImage.removeEventListener(`load`, onLoadListener)\n\n          onLoad?.({\n            wasCached: true,\n          })\n          // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n          setTimeout(() => {\n            ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n          }, 0)\n        })\n      }\n\n      imageCache.add(cacheKey)\n\n      return\n    }\n\n    if (renderImage && imageCache.has(cacheKey)) {\n      return\n    }\n\n    let animationFrame\n    let cleanupCallback\n    renderImageToStringPromise.then(\n      ({ renderImageToString, swapPlaceholderImage }) => {\n        if (!root.current) {\n          return\n        }\n\n        root.current.innerHTML = renderImageToString({\n          isLoading: true,\n          isLoaded: imageCache.has(cacheKey),\n          image,\n          ...props,\n        })\n\n        if (!imageCache.has(cacheKey)) {\n          animationFrame = requestAnimationFrame(() => {\n            if (root.current) {\n              cleanupCallback = swapPlaceholderImage(\n                root.current,\n                cacheKey,\n                imageCache,\n                style,\n                onStartLoad,\n                onLoad,\n                onError\n              )\n            }\n          })\n        }\n      }\n    )\n\n    // eslint-disable-next-line consistent-return\n    return (): void => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame)\n      }\n      if (cleanupCallback) {\n        cleanupCallback()\n      }\n    }\n  }, [image])\n\n  // useLayoutEffect is ran before React commits to the DOM. This allows us to make sure our HTML is using our cached image version\n  useLayoutEffect(() => {\n    if (imageCache.has(cacheKey) && renderImage) {\n      root.current.innerHTML = renderImage({\n        isLoading: imageCache.has(cacheKey),\n        isLoaded: imageCache.has(cacheKey),\n        image,\n        ...props,\n      })\n\n      // Trigger onStartload and onLoad events\n      onStartLoad?.({\n        wasCached: true,\n      })\n      onLoad?.({\n        wasCached: true,\n      })\n    }\n  }, [image])\n\n  // By keeping all props equal React will keep the component in the DOM\n  return createElement(as, {\n    ...wrapperProps,\n    style: {\n      ...wStyle,\n      ...style,\n      backgroundColor,\n    },\n    className: `${wClass}${className ? ` ${className}` : ``}`,\n    ref: root,\n    dangerouslySetInnerHTML: {\n      __html: sizer,\n    },\n    suppressHydrationWarning: true,\n  })\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = memo(\n  function GatsbyImage(props) {\n    if (!props.image) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(`[gatsby-plugin-image] Missing image prop`)\n      }\n\n      return null\n    }\n\n    if (!gatsbyImageIsInstalled() && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n      )\n    }\n\n    return createElement(GatsbyImageHydrator, props)\n  }\n)\n\nGatsbyImage.propTypes = propTypes\nGatsbyImage.displayName = `GatsbyImage`\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n  filename?: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    breakpoints,\n    outputPixelDensities,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","'use strict';\n\nconst preserveCamelCase = string => {\n\tlet isLastCharLower = false;\n\tlet isLastCharUpper = false;\n\tlet isLastLastCharUpper = false;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst character = string[i];\n\n\t\tif (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {\n\t\t\tstring = string.slice(0, i) + '-' + string.slice(i);\n\t\t\tisLastCharLower = false;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = true;\n\t\t\ti++;\n\t\t} else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {\n\t\t\tstring = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = false;\n\t\t\tisLastCharLower = true;\n\t\t} else {\n\t\t\tisLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst camelCase = (input, options) => {\n\tif (!(typeof input === 'string' || Array.isArray(input))) {\n\t\tthrow new TypeError('Expected the input to be `string | string[]`');\n\t}\n\n\toptions = Object.assign({\n\t\tpascalCase: false\n\t}, options);\n\n\tconst postProcess = x => options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;\n\n\tif (Array.isArray(input)) {\n\t\tinput = input.map(x => x.trim())\n\t\t\t.filter(x => x.length)\n\t\t\t.join('-');\n\t} else {\n\t\tinput = input.trim();\n\t}\n\n\tif (input.length === 0) {\n\t\treturn '';\n\t}\n\n\tif (input.length === 1) {\n\t\treturn options.pascalCase ? input.toUpperCase() : input.toLowerCase();\n\t}\n\n\tconst hasUpperCase = input !== input.toLowerCase();\n\n\tif (hasUpperCase) {\n\t\tinput = preserveCamelCase(input);\n\t}\n\n\tinput = input\n\t\t.replace(/^[_.\\- ]+/, '')\n\t\t.toLowerCase()\n\t\t.replace(/[_.\\- ]+(\\w|$)/g, (_, p1) => p1.toUpperCase())\n\t\t.replace(/\\d+(\\w|$)/g, m => m.toUpperCase());\n\n\treturn postProcess(input);\n};\n\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;\n","import classNames from \"classnames\";\nimport { StaticImage } from \"gatsby-plugin-image\";\nimport React from \"react\";\n\ninterface PortfolioProps {\n  hidden: boolean;\n  toggleSelf: () => void;\n}\n\nconst Portfolio: React.FC<PortfolioProps> = ({\n  hidden,\n  toggleSelf,\n}: PortfolioProps) => {\n  const [posterSelected, setPosterSelected] = React.useState(true);\n  const [paintingSelected, setPaintingSelected] = React.useState(true);\n  // const [publishingSelected, setPublishingSelected] = React.useState(true);\n  const [writingSelected, setWritingSelected] = React.useState(true);\n  // const [webSelected, setWebSelected] = React.useState(true);\n  const [isBig, makeBig] = React.useState<false | string>(false);\n\n  // todo: in order to get rid of \"display:none\" and use css transitions,\n  // need to recalculate the screen height when portfolio is hidden\n  // so that the scroll bar goes away.\n\n  return (\n    <div className=\"portfolio-transition col-start-1 text-3xl\">\n      <div\n        className={classNames(\n          !hidden\n            ? \"top-[200px] h-fit opacity-100\"\n            : \"left-[-5000px] hidden h-0 opacity-0\",\n          \"absolute z-30 flex w-full flex-row border border-lilac-dark bg-lilac-dark\"\n        )}>\n        <nav className=\"min-h-[90vh] w-[20rem] p-4 text-3xl text-white xl:text-4xl\">\n          <div className=\"sticky top-4 left-0\">\n            <h4 className=\"mb-4\">FILTER</h4>\n            <div className=\"group flex flex-row items-center\">\n              <button onClick={() => setPosterSelected(!posterSelected)}>\n                <span\n                  className={classNames(\n                    posterSelected ? \"visible\" : \"invisible\"\n                  )}>\n                  {\"x \"}\n                </span>\n                <span className=\"hover rounded-full border-2 border-lilac-light bg-lilac-muted-dark\">\n                  poster\n                </span>\n              </button>\n              <button\n                className=\"hover ml-2 mt-[2px] hidden h-fit rounded-full border-2 border-lilac-light bg-lilac-muted-dark py-px px-2 text-sm group-hover:inline-block xl:ml-4 xl:text-base\"\n                onClick={() => {\n                  setPosterSelected(true);\n                  setPaintingSelected(false);\n                  setWritingSelected(false);\n                }}>\n                only\n              </button>\n            </div>\n            <div className=\"group flex flex-row items-center\">\n              <button onClick={() => setPaintingSelected(!paintingSelected)}>\n                <span\n                  className={classNames(\n                    paintingSelected ? \"visible\" : \"invisible\"\n                  )}>\n                  {\"x \"}\n                </span>\n                <span className=\"hover rounded-full border-2 border-lilac-light bg-lilac-muted-dark\">\n                  painting\n                </span>\n              </button>\n              <button\n                className=\"hover ml-2 mt-[2px] hidden h-fit rounded-full border-2 border-lilac-light bg-lilac-muted-dark py-px px-2 text-sm group-hover:inline-block xl:ml-4 xl:text-base\"\n                onClick={() => {\n                  setPosterSelected(false);\n                  setPaintingSelected(true);\n                  setWritingSelected(false);\n                }}>\n                only\n              </button>\n            </div>\n            <div className=\"group flex flex-row items-center\">\n              <button onClick={() => setWritingSelected(!writingSelected)}>\n                <span\n                  className={classNames(\n                    writingSelected ? \"visible\" : \"invisible\"\n                  )}>\n                  {\"x \"}\n                </span>\n                <span className=\"hover rounded-full border-2 border-lilac-light bg-lilac-muted-dark\">\n                  writing\n                </span>\n              </button>\n              <button\n                className=\"hover ml-2 mt-[2px] hidden h-fit rounded-full border-2 border-lilac-light bg-lilac-muted-dark py-px px-2 text-sm group-hover:inline-block xl:ml-4 xl:text-base\"\n                onClick={() => {\n                  setPosterSelected(false);\n                  setPaintingSelected(false);\n                  setWritingSelected(true);\n                }}>\n                only\n              </button>\n            </div>\n          </div>\n        </nav>\n        <div className=\"grid w-full grid-cols-1 gap-px bg-lilac-dark lg:grid-cols-3 xl:grid-cols-4\">\n          <button\n            id=\"inTheGarden\"\n            onClick={() =>\n              makeBig(isBig === \"inTheGarden\" ? false : \"inTheGarden\")\n            }\n            className={classNames(\n              isBig === \"inTheGarden\" ? \"col-span-2\" : \"col-span-1 row-span-1\",\n              !writingSelected && \"hidden\",\n              \"pulse flex flex-col justify-start bg-white p-4 text-left text-2xl transition-all duration-300\"\n            )}>\n            <div\n              className={classNames(\n                isBig === \"inTheGarden\" ? \"h-[100rem]\" : \"m-0 h-96\",\n                \"overflow-scroll\"\n              )}>\n              <StaticImage\n                src=\"../assets/portfolio/images/in-the-garden.jpg\"\n                alt=\"\"\n              />\n            </div>\n            <div\n              className={classNames(\n                isBig === \"inTheGarden\" ? \"m-4\" : \"m-0 mt-4\"\n              )}>\n              Poem about AI and God published in issue #3 of the{\" \"}\n              <a\n                className=\"text-blue-500 hover:text-blue-600\"\n                href=\"https://www.tiltedhouse.org/the-review\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\">\n                Tilted House Review\n              </a>\n              . The epitaph was written by GPT-2, using the poem as a prompt.\n            </div>\n          </button>\n          <button\n            id=\"poemAndImage\"\n            onClick={() =>\n              makeBig(isBig === \"poemAndImage\" ? false : \"poemAndImage\")\n            }\n            className={classNames(\n              isBig === \"poemAndImage\" ? \"col-span-2\" : \"col-span-1 row-span-1\",\n              !posterSelected && \"hidden\",\n              \"pulse flex flex-col justify-start bg-white p-4 text-left text-2xl transition-all duration-300\"\n            )}>\n            <div\n              className={classNames(\n                isBig === \"poemAndImage\" ? \"\" : \"\",\n                \"h-fit\"\n              )}>\n              <StaticImage\n                src=\"../assets/portfolio/images/poem-and-image.jpg\"\n                alt=\"\"\n              />\n            </div>\n            <div\n              className={classNames(\n                isBig === \"poemAndImage\" ? \"m-4\" : \"m-0 mt-4\"\n              )}>\n              Flyer for a poetry workshop hosted by Pansy Press.\n            </div>\n          </button>\n          <button\n            id=\"selfPortrait\"\n            onClick={() =>\n              makeBig(isBig === \"selfPortrait\" ? false : \"selfPortrait\")\n            }\n            className={classNames(\n              isBig === \"selfPortrait\" ? \"col-span-2\" : \"col-span-1 row-span-1\",\n              !paintingSelected && \"hidden\",\n              \"pulse flex flex-col justify-start bg-white p-4 text-left text-2xl transition-all duration-300\"\n            )}>\n            <div\n              className={classNames(\n                isBig === \"selfPortrait\" ? \"\" : \"\",\n                \"h-fit\"\n              )}>\n              <StaticImage\n                src=\"../assets/portfolio/images/self-portrait.jpg\"\n                alt=\"\"\n              />\n            </div>\n            <div\n              className={classNames(\n                isBig === \"selfPortrait\" ? \"m-4\" : \"m-0 mt-4\"\n              )}>\n              Part of a series of self-portraits of selfies: an exploration of\n              the female gaze upon itself.\n            </div>\n          </button>\n          <button\n            id=\"figure\"\n            onClick={() => makeBig(isBig === \"figure\" ? false : \"figure\")}\n            className={classNames(\n              isBig === \"figure\" ? \"col-span-2\" : \"col-span-1 row-span-1\",\n              !paintingSelected && \"hidden\",\n              \"pulse flex flex-col justify-start bg-white p-4 text-left text-2xl transition-all duration-300\"\n            )}>\n            <div className={classNames(isBig === \"figure\" ? \"\" : \"\", \"h-fit\")}>\n              <StaticImage src=\"../assets/portfolio/images/figure.jpg\" alt=\"\" />\n            </div>\n            <div\n              className={classNames(isBig === \"figure\" ? \"m-4\" : \"m-0 mt-4\")}>\n              Portait of a friend.\n            </div>\n          </button>\n          <button\n            id=\"bassideDopeCobra\"\n            onClick={() =>\n              makeBig(isBig === \"bassideDopeCobra\" ? false : \"bassideDopeCobra\")\n            }\n            className={classNames(\n              isBig === \"bassideDopeCobra\"\n                ? \"col-span-2\"\n                : \"col-span-1 row-span-1\",\n              !posterSelected && \"hidden\",\n              \"pulse flex flex-col justify-start bg-white p-4 text-left text-2xl transition-all duration-300\"\n            )}>\n            <div\n              className={classNames(\n                isBig === \"bassideDopeCobra\" ? \"\" : \"\",\n                \"h-fit\"\n              )}>\n              <StaticImage\n                src=\"../assets/portfolio/images/basside-dope-cobra.jpg\"\n                alt=\"\"\n              />\n            </div>\n            <div\n              className={classNames(\n                isBig === \"bassideDopeCobra\" ? \"m-4\" : \"m-0 mt-4\"\n              )}>\n              Show flyer.\n            </div>\n          </button>\n          <button\n            id=\"templetons\"\n            onClick={() =>\n              makeBig(isBig === \"templetons\" ? false : \"templetons\")\n            }\n            className={classNames(\n              isBig === \"templetons\" ? \"col-span-2\" : \"col-span-1 row-span-1\",\n              !posterSelected && \"hidden\",\n              \"pulse flex flex-col justify-start bg-white p-4 text-left text-2xl transition-all duration-300\"\n            )}>\n            <div\n              className={classNames(isBig === \"templetons\" ? \"\" : \"\", \"h-fit\")}>\n              <StaticImage\n                src=\"../assets/portfolio/images/templetons-reopening-color.jpg\"\n                alt=\"\"\n              />\n            </div>\n            <div\n              className={classNames(\n                isBig === \"templetons\" ? \"m-4\" : \"m-0 mt-4\"\n              )}>\n              Flyer for an event at local venue.\n            </div>\n          </button>\n          <button\n            id=\"inThisEconomy\"\n            onClick={() =>\n              makeBig(isBig === \"inThisEconomy\" ? false : \"inThisEconomy\")\n            }\n            className={classNames(\n              isBig === \"inThisEconomy\"\n                ? \"col-span-2\"\n                : \"col-span-1 row-span-1\",\n              !posterSelected && \"hidden\",\n              \"pulse flex flex-col justify-start bg-white p-4 text-left text-2xl transition-all duration-300\"\n            )}>\n            <div\n              className={classNames(\n                isBig === \"inThisEconomy\" ? \"\" : \"\",\n                \"h-fit\"\n              )}>\n              <StaticImage\n                src=\"../assets/portfolio/images/in-this-economy.jpg\"\n                alt=\"\"\n              />\n            </div>\n            <div\n              className={classNames(\n                isBig === \"inThisEconomy\" ? \"m-4\" : \"m-0 mt-4\"\n              )}>\n              Tour poster.\n            </div>\n          </button>\n          <button\n            id=\"ismail\"\n            onClick={() => makeBig(isBig === \"ismail\" ? false : \"ismail\")}\n            className={classNames(\n              isBig === \"ismail\" ? \"col-span-2\" : \"col-span-1 row-span-1\",\n              !paintingSelected && \"hidden\",\n              \"pulse flex flex-col justify-start bg-white p-4 text-left text-2xl transition-all duration-300\"\n            )}>\n            <div className={classNames(isBig === \"ismail\" ? \"\" : \"\", \"h-fit\")}>\n              <StaticImage src=\"../assets/portfolio/images/ismail.jpg\" alt=\"\" />\n            </div>\n            <div\n              className={classNames(isBig === \"ismail\" ? \"m-4\" : \"m-0 mt-4\")}>\n              Portrait of a friend.\n            </div>\n          </button>\n          <button\n            id=\"nude\"\n            onClick={() => makeBig(isBig === \"nude\" ? false : \"nude\")}\n            className={classNames(\n              isBig === \"nude\" ? \"col-span-2\" : \"col-span-1 row-span-1\",\n              !paintingSelected && \"hidden\",\n              \"pulse flex flex-col justify-start bg-white p-4 text-left text-2xl transition-all duration-300\"\n            )}>\n            <div className={classNames(isBig === \"nude\" ? \"\" : \"\", \"h-fit\")}>\n              <StaticImage src=\"../assets/portfolio/images/nude.jpg\" alt=\"\" />\n            </div>\n            <div className={classNames(isBig === \"nude\" ? \"m-4\" : \"m-0 mt-4\")}>\n              Portrait sketch from a life drawing session.\n            </div>\n          </button>\n          <button\n            id=\"pansyParty\"\n            onClick={() =>\n              makeBig(isBig === \"pansyParty\" ? false : \"pansyParty\")\n            }\n            className={classNames(\n              isBig === \"pansyParty\" ? \"col-span-2\" : \"col-span-1 row-span-1\",\n              !posterSelected && \"hidden\",\n              \"pulse flex flex-col justify-start bg-white p-4 text-left text-2xl transition-all duration-300\"\n            )}>\n            <div\n              className={classNames(isBig === \"pansyParty\" ? \"\" : \"\", \"h-fit\")}>\n              <StaticImage\n                src=\"../assets/portfolio/images/pansy-press-party.jpg\"\n                alt=\"\"\n              />\n            </div>\n            <div\n              className={classNames(\n                isBig === \"pansyParty\" ? \"m-4\" : \"m-0 mt-4\"\n              )}>\n              Flyer for a Pansy Press poetry reading.\n            </div>\n          </button>\n          <button\n            id=\"theDistance\"\n            onClick={() =>\n              makeBig(isBig === \"theDistance\" ? false : \"theDistance\")\n            }\n            className={classNames(\n              isBig === \"theDistance\" ? \"col-span-2\" : \"col-span-1 row-span-1\",\n              !writingSelected && \"hidden\",\n              \"pulse flex flex-col justify-start bg-white p-4 text-left text-2xl transition-all duration-300\"\n            )}>\n            <div\n              className={classNames(\n                isBig === \"theDistance\" ? \"\" : \"\",\n                \"h-fit\"\n              )}>\n              <StaticImage\n                src=\"../assets/portfolio/images/the-distance.jpg\"\n                alt=\"\"\n              />\n            </div>\n            <div\n              className={classNames(\n                isBig === \"theDistance\" ? \"m-4\" : \"m-0 mt-4\"\n              )}>\n              Poem published by Tiger Dingsun as part of his{\" \"}\n              <a\n                className=\"text-blue-500 hover:text-blue-600\"\n                href=\"https://tdingsun.github.io/reading-machines/\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\">\n                Reading Machines\n              </a>{\" \"}\n              project. Visit the website to see the animation he coded to\n              portray my poem in a \"non-teleological\" fashion.\n            </div>\n          </button>\n          <button\n            id=\"citrus\"\n            onClick={() => makeBig(isBig === \"citrus\" ? false : \"citrus\")}\n            className={classNames(\n              isBig === \"citrus\" ? \"col-span-2\" : \"col-span-1 row-span-1\",\n              !paintingSelected && \"hidden\",\n              \"pulse flex flex-col justify-start bg-white p-4 text-left text-2xl transition-all duration-300\"\n            )}>\n            <div className={classNames(isBig === \"citrus\" ? \"\" : \"\", \"h-fit\")}>\n              <StaticImage src=\"../assets/portfolio/images/citrus.jpg\" alt=\"\" />\n            </div>\n            <div\n              className={classNames(isBig === \"citrus\" ? \"m-4\" : \"m-0 mt-4\")}>\n              Still life of backyard citrus.\n            </div>\n          </button>\n          <button\n            id=\"treasureMammal\"\n            onClick={() =>\n              makeBig(isBig === \"treasureMammal\" ? false : \"treasureMammal\")\n            }\n            className={classNames(\n              isBig === \"treasureMammal\"\n                ? \"col-span-2\"\n                : \"col-span-1 row-span-1\",\n              !posterSelected && \"hidden\",\n              \"pulse flex flex-col justify-start bg-white p-4 text-left text-2xl transition-all duration-300\"\n            )}>\n            <div\n              className={classNames(\n                isBig === \"treasureMammal\" ? \"\" : \"\",\n                \"h-fit\"\n              )}>\n              <StaticImage\n                src=\"../assets/portfolio/images/treasure-mammal-1.jpg\"\n                alt=\"\"\n              />\n            </div>\n            <div\n              className={classNames(\n                isBig === \"treasureMammal\" ? \"m-4\" : \"m-0 mt-4\"\n              )}>\n              Show poster.\n            </div>\n          </button>\n        </div>\n        <div className=\"hover sticky top-0 left-0 flex w-20 flex-col self-start pt-4 pb-1 text-5xl text-white\">\n          <button className=\"\" onClick={toggleSelf}>\n            X\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Portfolio;\n"],"names":["hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","toString","Object","prototype","includes","key","call","join","module","exports","default","hasNativeLazyLoadSupport","HTMLImageElement","srcSet","width","height","layout","wrapperStyle","className","style","getMainProps","isLoading","isLoaded","images","loading","shouldLoad","_extends","opacity","getPlaceholderProps","placeholder","backgroundColor","objectFit","objectPosition","position","top","left","bottom","right","result","transition","Sizer","React","createElement","paddingTop","maxWidth","display","alt","role","src","LayoutWrapper","_ref","children","props","_objectWithoutPropertiesLoose","Fragment","Image","decoding","Picture","_ref2","fallback","sources","sizes","map","media","type","fallbackImage","propTypes","PropTypes","displayName","Placeholder","_Picture$propTypes","propName","componentName","Error","MainImage","removeNewLines","str","replace","altValidator","rest","image","_excluded","Set","renderImageToStringPromise","renderImage","GatsbyImageHydrator","as","class","preactClass","onStartLoad","onLoad","onError","getWrapperProps","wStyle","wClass","wrapperProps","root","useRef","useMemo","JSON","stringify","sizer","useEffect","import","then","renderImageToString","swapPlaceholderImage","ssrImage","current","querySelector","complete","wasCached","setTimeout","removeAttribute","addEventListener","removeEventListener","onLoadListener","imageCache","add","cacheKey","has","animationFrame","cleanupCallback","innerHTML","requestAnimationFrame","cancelAnimationFrame","useLayoutEffect","ref","dangerouslySetInnerHTML","__html","suppressHydrationWarning","GatsbyImage","memo","_getStaticImage","StaticImage","__imageData","imageData","__error","console","warn","imgClassName","imgStyle","placeholderBackgroundColor","cleanedImages","source","checkDimensionProps","validLayouts","GatsbyImageBrowser","camelCase","input","options","TypeError","assign","pascalCase","x","trim","filter","toUpperCase","toLowerCase","string","isLastCharLower","isLastCharUpper","isLastLastCharUpper","character","test","slice","preserveCamelCase","_","p1","m","charAt","hidden","toggleSelf","posterSelected","setPosterSelected","paintingSelected","setPaintingSelected","writingSelected","setWritingSelected","isBig","makeBig","onClick","id","href","target","rel"],"sourceRoot":""}